trigger: none

variables:
  dockerImageName: adarsh011/amazon-app
  azureWebAppName: adarsh-amazon-java-app
  azureResourceGroup: OCEAN

pool:
  name: "Adarsh-CI-CD"

stages:

# -------------------
# 1. BUILD STAGE
# -------------------
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: MavenBuild
    displayName: 'Maven Package'
    steps:
    # 1️⃣ Build WAR using Maven
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'

    # 2️⃣ Copy WAR to artifact staging directory
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'target'        # Make sure your WAR is here
        Contents: '*.war'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    # 3️⃣ Publish WAR as artifact
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

# -------------------
# 2. DOCKER STAGE
# -------------------
- stage: Docker
  displayName: 'Docker Build and Push'
  dependsOn: Build
  jobs:
  - job: DockerBuildPush
    displayName: 'Build & Push Docker Image'
    steps:
    # 1️⃣ Download WAR artifact from previous stage
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'drop'
        targetPath: '$(Build.SourcesDirectory)/docker-context'

    # 2️⃣ Copy WAR to folder with Dockerfile
    - task: CopyFiles@2
      displayName: 'Prepare WAR for Docker build'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/docker-context'
        Contents: '*.war'
        TargetFolder: '$(Build.SourcesDirectory)'

    # 3️⃣ Verify WAR is in place
    - script: |
        echo "Listing files in Docker build context:"
        ls -l $(Build.SourcesDirectory)
      displayName: 'Verify WAR in build context'

    # 4️⃣ Login to DockerHub
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'adarsh-dhub'

    # 5️⃣ Build & Push Docker Image
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        repository: '$(dockerImageName)'
        dockerfile: 'Dockerfile'
        buildContext: '$(Build.SourcesDirectory)'
        tags: |
          latest
          $(Build.BuildId)

# -------------------
# 3. DEPLOY STAGE
# -------------------
- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  dependsOn: Docker
  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy Container to Azure'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: 'adarsh-azure'
              appName: '$(azureWebAppName)'
              containers: '$(dockerImageName):latest'

